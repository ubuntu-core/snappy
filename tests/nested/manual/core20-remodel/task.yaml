summary: verify a simple UC20 remodel

systems: [ubuntu-20.04-64]

environment:
  NESTED_CUSTOM_MODEL: $TESTSLIB/assertions/valid-for-testing-pc-20.model
  NESTED_IMAGE_ID: uc20-remodel-testing
  NESTED_ENABLE_TPM: true
  NESTED_ENABLE_SECURE_BOOT: true
  NESTED_BUILD_SNAPD_FROM_CURRENT: true

prepare: |
    #shellcheck source=tests/lib/nested.sh
    . "$TESTSLIB/nested.sh"

    # modify and repack gadget snap to add a defaults section and use our own
    # prepare-device hook to use the fakedevicesvc
    mkdir "$(nested_get_extra_snaps_path)"

    # Get the snakeoil key and cert for signing gadget assets (shim)
    KEY_NAME=$(nested_get_snakeoil_key)
    SNAKEOIL_KEY="$PWD/$KEY_NAME.key"
    SNAKEOIL_CERT="$PWD/$KEY_NAME.pem"

    snap download --basename=pc --channel="20/edge" pc
    unsquashfs -d pc-gadget pc.snap

    nested_secboot_sign_gadget pc-gadget "$SNAKEOIL_KEY" "$SNAKEOIL_CERT"
    snap pack pc-gadget/ "$(nested_get_extra_snaps_path)"

    tests.nested build-image core
    tests.nested create-vm core

execute: |
    # shellcheck source=tests/lib/nested.sh
    . "$TESTSLIB/nested.sh"
    boot_id="$( nested_get_boot_id )"
    tests.nested exec snap model |MATCH 'model +my-model$'
    # XXX: recovery system label is based on a date; we may end up with a
    # different label if the remodel runs around midnight; the label will
    # conflict with an existing system label
    label_base=$(tests.nested exec "date '+%Y%m%d'")

    echo "Refresh model assertion to revision 2"
    nested_copy "$TESTSLIB/assertions/valid-for-testing-pc-revno-2-20.model"
    REMOTE_CHG_ID="$(tests.nested exec sudo snap remodel --no-wait valid-for-testing-pc-revno-2-20.model)"
    nested_wait_for_reboot "${boot_id}"
    tests.nested exec sudo snap watch "${REMOTE_CHG_ID}"

    echo "Verify the system is back in run mode"
    tests.nested exec "sudo cat /proc/cmdline" | MATCH snapd_recovery_mode=run

    # this is a simple model revision refresh
    echo "Verify the model"
    tests.nested exec snap model --verbose > rev-2-model
    MATCH 'model: +my-model' < rev-2-model
    MATCH 'revision: +2' < rev-2-model

    # seed system was created
    revno2_label="${label_base}-1"
    echo "Verify seed system with label $revno2_label"
    tests.nested exec "sudo cat /run/mnt/ubuntu-seed/systems/${revno2_label}/model" > revno-2-from-seed.model
    MATCH 'model: my-model' < revno-2-from-seed.model
    MATCH 'revision: 2' < revno-2-from-seed.model
    tests.nested exec "sudo cat /var/lib/snapd/modeenv" > modeenv
    MATCH "current_recovery_systems=.*,${revno2_label}" < modeenv
    MATCH "good_recovery_systems=.*,${revno2_label}" < modeenv

    # the revision pulls in test-snapd-tools-core20 snap
    echo "Verify new model revision snaps"
    tests.nested exec snap list test-snapd-tools-core20
    # the snap is pulled in from the store, so it should be located in shared
    # snaps directory
    tests.nested exec find /run/mnt/ubuntu-seed/snaps -name 'test-snapd-tools-core20_*.snap' | MATCH 'test-snapd-tools-core20'

    boot_id="$( nested_get_boot_id )"

    echo "Refresh model assertion to revision 3"
    nested_copy "$TESTSLIB/assertions/valid-for-testing-pc-revno-3-20.model"
    REMOTE_CHG_ID="$(tests.nested exec sudo snap remodel --no-wait valid-for-testing-pc-revno-3-20.model)"
    nested_wait_for_reboot "${boot_id}"
    tests.nested exec sudo snap watch "${REMOTE_CHG_ID}"

    echo "Verify the model"
    tests.nested exec snap model --verbose > rev-3-model
    MATCH 'model: +my-model' < rev-3-model
    MATCH 'revision: +3' < rev-3-model

    # seed system was created
    revno3_label="${label_base}-2"
    echo "Verify seed system with label $revno3_label"
    tests.nested exec "sudo cat /run/mnt/ubuntu-seed/systems/${revno3_label}/model" > revno-3-from-seed.model
    MATCH 'model: my-model' < revno-3-from-seed.model
    MATCH 'revision: 3' < revno-3-from-seed.model
    tests.nested exec "sudo cat /var/lib/snapd/modeenv" > modeenv
    MATCH "current_recovery_systems=.*,${revno3_label}" < modeenv
    MATCH "good_recovery_systems=.*,${revno3_label}" < modeenv

    # because the system is considered 'seeded' we are able to switch to the
    # recover mode
    echo "Switch to recover mode of new seed system"
    boot_id="$( nested_get_boot_id )"
    tests.nested exec sudo snap reboot --recover "${label_base}-2" | MATCH 'Reboot into ".*" "recover" mode'
    nested_wait_for_reboot "${boot_id}"
    # Verify we are in recover mode with the expected system label
    tests.nested exec 'sudo cat /proc/cmdline' | MATCH "snapd_recovery_mode=recover snapd_recovery_system=${label_base}-2 "

    boot_id="$( nested_get_boot_id )"
    echo "And back to run mode"
    nested_wait_for_snap_command
    tests.nested exec "sudo snap wait system seed.loaded"
    tests.nested exec sudo snap reboot --run | MATCH 'Reboot into "run" mode.'
    nested_wait_for_reboot "${boot_id}"
    tests.nested exec 'sudo cat /proc/cmdline' | MATCH "snapd_recovery_mode=run "
